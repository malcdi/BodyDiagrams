
<table>
  <tr>
	  <td>
		<p> Drag your mouse on the photo to define a region ..... <br/> !Fix this; the width of this text defines where the radio buttons align!</p>
		<div class="photo-container">
			<div id="body_image_div" style="width:330px;height:750px;position:absolute;overflow:hidden">
		  		<!--Removed this image. Instead, the image is actually drawn onto the canvas. This will let us save it with annotations.-->
				<!--<img id="body_view" src="/assets/<%=@cur_view.img_name %>" onmousedown="event.preventDefault();" 
						alt="no photo" style="position:relative;"></img>-->
			</div>
		  	<canvas id="canvas" width="330" height="750" 
					style="position:absolute; top:0px; background-color:transparent; border: 1px solid black;">
			</canvas>
		  	<div id="tags"></div>
		  	<div id="tagging"></div>
		</div>
		<ul id="menu-container">
				<li class="menu" id="1" style="color:#FFFFB2">Mild</li>
				<li class="menu" id="2" style="color:#FECC5C">Somewhat Mild</li>
				<li class="menu" id="3" style="color:#FD8D3C">Moderate</li>
				<li class="menu" id="4" style="color:#F03B20">Somewhat Severe</li>
				<li class="menu" id="5" style="color:#BD0026">Severe</li> Pain <br/>
				
				<li class="menu" id="6" style="color:#EDF8E9">Mild</li>
				<li class="menu" id="7" style="color:#BAE4B3">Somewhat Mild</li>
				<li class="menu" id="8" style="color:#74C476">Moderate</li>
				<li class="menu" id="9" style="color:#31A354">Somewhat Severe</li>
				<li class="menu" id="10" style="color:#006D2C">Severe</li> Numbness <br/>
				
				<li class="menu" id="11" style="color:#F1EEF6">Mild</li>
				<li class="menu" id="12" style="color:#BDC9E1">Somewhat Mild</li>
				<li class="menu" id="13" style="color:#74A9CF">Moderate</li>
				<li class="menu" id="14" style="color:#2B8CBE">Somewhat Severe</li>
				<li class="menu" id="15" style="color:#045A8D">Severe</li>
				<li><input type="text" name="annotate" id="annotate" value="enter symptom"/></li>
		</ul>
	  </td>
	  <td>
	  	<div id="view_change" onmouseup="change_view()"><img src="/assets/icon.png" alt="no photo"></img></div>
	  	<input id="view_id" type="hidden" value='<%=@cur_view.id%>'>
	  	<div id="coord"></div>â€‹
	  	<div id="free_or_region">
	  		<input type="radio" id="free" name="free_or_region" /><label for="free">Free Hand</label>
	  		<input type="radio" id="region" name="free_or_region" checked="checked" /><label for="region">By Region</label>
			<input type="radio" id="zoom" name="free_or_region"/><label for="region">Zoom (click, drag, and release over a region to zoom)</label>
	  	</div>
		<div id="symptom_selection_panel">
			<input type="radio" id="pain" name="symptom_selection" checked="checked" /><label for="pain">pain</label><br/>
			<input type="radio" id="numbness" name="symptom_selection" /><label for="numbness">numbness</label><br/>
			<input type="radio" id="tingling" name="symptom_selection" /><label for="tingling">tingling</label><br/>
			<input type="radio" id="itchiness" name="symptom_selection" /><label for="itchiness">itchiness</label><br/>
			<input type="radio" id="no symptom" name="symptom_selection" /><label for="no symptom">no symptom</label><br/>
		</div>
		<div id="zoom button">
			<button onclick="resetZoom()">Reset Zoom</button>
		</div>
		<div id="zoom_canvas_div" style="background-color:transparent;width:330px;height:400px;position:absolute;overflow:hidden">
			<img id="zoom_body_view" src="/assets/<%=@cur_view.img_name %>" onmousedown="event.preventDefault();" 
					alt="no photo" style="position:relative;"></img>
		</div>
		<canvas id="zoom_canvas" width="330" height="400"
				style="position:absolute; background-color:transparent; border: 1px solid red;">
		</canvas>
		
	  </td>
  </tr>
</table>

<script type="text/javascript">
//DM: comments from 7/22/12: TODO: remove magic numbers and replace them with constants. 330 is the width of our canvas boxes, 337 is the actual image width etc. Obviously there's much more todo, too :-)

//DM: from colorbrewer; update soon
var colors = ['#e41a1c', '#377EB8', '#4DAF4A', '#984EA3', '#FF7F00'];
var pain_colors = ['#FFFFB2', '#FECC5C', '#FD8D3C', '#F03B20', '#BD0026'];
var numbness_colors = ['#EDF8E9', '#BAE4B3', '#74C476', '#31A354', '#006D2C'];
var other_colors = ['#F1EEF6', '#BDC9E1', '#74A9CF', '#2B8CBE', '#045A8D'];

/********** utils ******************/
// Thanks to http://stackoverflow.com/questions/55677/how-do-i-get-the-coordinates-of-a-mouse-click-on-a-canvas-element/4430498#4430498
function fixPosition(e, gCanvasElement){
	var x;
	var y;
	if (e.pageX || e.pageY) { 
		x = e.pageX;
		y = e.pageY;
	}
	else { 
		x = e.clientX + document.body.scrollLeft +
				document.documentElement.scrollLeft;
		y = e.clientY + document.body.scrollTop +
				document.documentElement.scrollTop;
	} 
	x -= gCanvasElement.offsetLeft;
	y -= gCanvasElement.offsetTop;
	return {x: x, y:y};
}

var views = {0:"/assets/front.png", 1:"/assets/right.png", 2:"/assets/back.png", 3:"/assets/left.png"};
var viewsDataURLS = {0:null,1:null,2:null,3:null};
view_side_num='<%=@cur_view.view_side%>'
var photo_tagger;
var mousedown = false;
var ctx;
// When the DOM is ready, initialize the scripts.
jQuery(function( $ ){
	// Set up the photo tagger.
	$( "div.photo-container" ).photoTagger({
		
		// The API urls.
		loadURL: "/main/get_tags",
		saveURL: "/main/post_tag",
		deleteURL: "/main/remove_tags",
		
		// Default to turned on.
		// isTagCreationEnabled: false,
		
		// This will allow us to clean the response from 
		// a ColdFusion server (it will convert the 
		// uppercase keys to lowercase keys expected by
		// the photoTagger plugin.
		cleanAJAXResponse: cleanColdFusionJSONResponse
	});
	photo_tagger= $( "div.photo-container" ).data("photoTagger");
	
	drawBodyImageOntoCanvas(0);
	
	/* Free Hand */
	var canvas = document.getElementById('canvas'),
		coord = document.getElementById('coord');
	ctx = canvas.getContext('2d');
	//DM: don't think this is ever used?
	//var offset={x:canvas.offsetParent.offsetLeft, y:canvas.offsetParent.offsetTop}; //get the offset 
	ctx.lineWidth = 2;
	
	/* DM: Amy's Free Hand mirrored for the zoom canvas*/
	var zoom_canvas = document.getElementById('zoom_canvas'),
		coord = document.getElementById('coord');
	zoom_ctx = zoom_canvas.getContext('2d');
	zoom_ctx.lineWidth = 5;
	 
	/* DM: Scale mappings between zoom canvas and normal canvas. These are the default mappings */
	zoom_to_main_left_offset = 0;
	zoom_to_main_top_offset = 0;
	zoom_to_main_scale_factor_width = 1; //1:1 is our original scale
	zoom_to_main_scale_factor_height=1;
	
	/* Other UI */
	$( "#menu-container" ).children().button();
	$("#free_or_region").change(
		function(){
			if($('input[name=free_or_region]:checked')[0].id=="free"){
				photo_tagger.ignoreMouseDown();		
				zoomIgnoreMouseDown();
				freeHandListenMouseDown();
			}
			//for zooming
			else if($('input[name=free_or_region]:checked')[0].id=="zoom"){
				freeHandIgnoreMouseDown();
				photo_tagger.ignoreMouseDown();
				zoomListenMouseDown();
			}
			else{
				photo_tagger.listenMouseDown();
				freeHandIgnoreMouseDown();
				zoomIgnoreMouseDown();
			}
		}
	);
	
	//color changing / pain hierarchy
	$("#symptom_selection_panel").change(
		function(){
			if($('input[name=symptom_selection]:checked')[0].id=="pain"){
				ctx.strokeStyle = colors[0];
				zoom_ctx.strokeStyle = colors[0];
			} else if($('input[name=symptom_selection]:checked')[0].id=="numbness"){
				ctx.strokeStyle = colors[1];
				zoom_ctx.strokeStyle = colors[1];
			} else if($('input[name=symptom_selection]:checked')[0].id=="tingling"){
				ctx.strokeStyle = colors[2];
				zoom_ctx.strokeStyle = colors[2];
			} else if($('input[name=symptom_selection]:checked')[0].id=="itchiness"){
				ctx.strokeStyle = colors[3];
				zoom_ctx.strokeStyle = colors[3];
			} else if($('input[name=symptom_selection]:checked')[0].id=="no symptom"){
				ctx.strokeStyle = colors[4];
				zoom_ctx.strokeStyle = colors[4];
			}	
		}
		)
});

//DM: drawing the image onto the canvas instead of having it as a background, so that we can save the image + annotations
function drawBodyImageOntoCanvas(imgNum){

	if(viewsDataURLS[imgNum]==null){
		var img = new Image();
		img.onload = function(){
	    	ctx.drawImage(img,0,0);
			var imgDURL = canvas.toDataURL();
			viewsDataURLS[imgNum] = imgDURL;
		};
		img.src=views[imgNum];
	}
	else{
		var img = new Image();
		img.onload = function(){
          	ctx.drawImage(img,0,0);
		};
		img.src=viewsDataURLS[imgNum];
	}
}

/* save the information */
//DM: is it saving? if so, where?
function change_view(){
	var imgDURL = canvas.toDataURL(); //DM: save the current canvas
	viewsDataURLS[view_side_num] = imgDURL;
	
	view_side_num=(view_side_num+1)%4;
	
	ctx.clearRect(0,0,330,700); //DM: clear the existing canvas marks for the new view
	
	//DM: my ajax is not too good. I'm not sure what the code below is doing.
	$.ajax({
		method: "get",
		url: "/main/get_view",
		data: {
			view_num: view_side_num
		},
		dataType: "json",
		cache: false,
		success: function( response ){
			//$( "div.photo-container" ).deleteAllTags();
			//document.getElementById("body_view").src='/assets/'+response["img_name"];	 //DM: drawing image directly onto canvas for saving
			document.getElementById("view_id").value=response["id"];
			//$( "div.photo-container" ).loadTags();
		}		
	});
	drawBodyImageOntoCanvas(view_side_num);//DM: Draw the body image on the canvas so that we can save the whole image
}

function freeHandIgnoreMouseDown(){
	$("#canvas").unbind("mousedown");
	$("#canvas").unbind("mousemove");
	$("#canvas").unbind("mouseup");
}

function freeHandListenMouseDown(){
	var zoom_offset={x:zoom_canvas.offsetLeft, y:zoom_canvas.offsetTop};

	$("#canvas").bind(
		"mousedown", 
		function(e){
			//var pos = fixPosition(e, canvas);
			var pos={x: e.offsetX, y:e.offsetY};
			mousedown = true;
			ctx.beginPath();
			ctx.moveTo(pos.x, pos.y);
	});
	
	$("#canvas").bind(
		"mousemove", 
		function(e){
			//var pos = fixPosition(e, canvas);
			var pos={x: e.offsetX, y:e.offsetY};
			coord.innerHTML = '(' + pos.x + ',' + pos.y + ')';
			if (mousedown) {
				console.log("x:"+pos.x + "  y:"+pos.y);
				ctx.lineTo(pos.x, pos.y);
				ctx.stroke();
			}
	});
	
	$("#canvas").bind(
		"mouseup", 
		function(e){
			mousedown = false;
		//var strDataURI = canvas.toDataURL();
		//console.log("saving canvas to URL:" + strDataURI);
	});

	//DM: mirror for the zoom canvas
	$("#zoom_canvas").bind(
		"mousedown", 
		function(e){
			//var pos = fixPosition(e, canvas);
			var pos={x: e.offsetX, y:e.offsetY};
			var main_pos={x:pos.x * zoom_to_main_scale_factor_width + zoom_to_main_left_offset, y:pos.y * zoom_to_main_scale_factor_width + zoom_to_main_top_offset};
			mousedown = true;
			
			zoom_ctx.beginPath();
			zoom_ctx.moveTo(pos.x, pos.y);

			ctx.beginPath();
			ctx.moveTo(main_pos.x, main_pos.y);
	});
	
	$("#zoom_canvas").bind(
		"mousemove", 
		function(e){
			console.log("in zoom_canvas mousemove");
			//var pos = fixPosition(e, canvas);
			var pos={x: e.offsetX, y:e.offsetY};
			var main_pos={x:pos.x * zoom_to_main_scale_factor_width + zoom_to_main_left_offset, y:pos.y * zoom_to_main_scale_factor_width + zoom_to_main_top_offset};
			coord.innerHTML = '(' + pos.x + ',' + pos.y + ')';
			if (mousedown) {
				console.log("x:"+pos.x + "  y:"+pos.y + " | | " + "x:"+main_pos.x + "y:"+main_pos.y);

				zoom_ctx.lineTo(pos.x, pos.y);
				zoom_ctx.stroke();
				
				ctx.lineTo(main_pos.x, main_pos.y);
				ctx.stroke();
			}
	});
	
	$("#zoom_canvas").bind(
		"mouseup", 
		function(e){
			mousedown = false;
		ctx.closePath();
		//var strDataURI = canvas.toDataURL();
		//console.log("saving canvas to URL:" + strDataURI);
	});
}
	
//DM: Zoom function
function resetZoom(){
	d = document.getElementById("zoom_body_view");
	d.style.left=0;
	d.style.top=0;
	d.width=337;
	
	zoom_to_main_left_offset = 0;
	zoom_to_main_top_offset = 0;
	zoom_to_main_scale_factor_width=1;
	zoom_to_main_scale_factor_height=1;
	
	zoom_ctx.clearRect(0,0,330,400)
}

function zoomWidth(left, top, width, height){
	
	d = document.getElementById("zoom_body_view");
	d.style.left=-(left/width * 337)+"px";
	d.style.top=-(top/width * 337)+"px";
	d.width=(337/width*337);
	
	console.log("Translating to " + left + ", " + top + ", " + width + " in zoom window.");
	
	//DM: also need to adjust several scales. translateCoordinateMappings should be called after this function.
}

function translateCoordinateMappings(left, top, width){
	zoom_to_main_left_offset = left;
	zoom_to_main_top_offset = top;
	zoom_to_main_scale_factor_width = width/337; //1:1 is our original scale
	zoom_to_main_scale_factor_height = zoom_to_main_scale_factor_width * 330/400; //remove these magic numbers!!!
}

function zoomListenMouseDown(){
	var startx, starty, endx, endy;
	$("#canvas").bind(
		"mousedown", 
		function(e){
			//var pos = fixPosition(e, canvas);
			var pos={x: e.offsetX, y:e.offsetY};
			mousedown = true;
			startx = pos.x;
			starty = pos.y;
			console.log("startx: " + startx + ", starty: " + starty);
	});
	
	$("#canvas").bind(
		"mousemove", 
		function(e){
			//var pos = fixPosition(e, canvas);
			var pos={x: e.offsetX, y:e.offsetY};
			coord.innerHTML = '(' + pos.x + ',' + pos.y + ')';
			if (mousedown) {
				console.log("x:"+pos.x + "  y:"+pos.y);
				endx = pos.x;
				endy = pos.y;
			}
	});
	
	$("#canvas").bind(
		"mouseup", 
		function(e){
			mousedown = false;
		console.log("endx: " + endx + ", endy: " + endy);
		zoomWidth(Math.min(startx, endx), Math.min(starty, endy), Math.abs(startx - endx), Math.abs(starty - endy));
		translateCoordinateMappings(Math.min(startx, endx), Math.min(starty, endy), Math.abs(startx - endx));
	});
	
}

function zoomIgnoreMouseDown(){
	$("#canvas").unbind("mousedown");
	$("#canvas").unbind("mousemove");
	$("#canvas").unbind("mouseup");
}
			  
</script>

